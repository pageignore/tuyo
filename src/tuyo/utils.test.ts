import { describe, it, expect } from 'vitest'
import { isNumber, isString, isBoolean, isNull, isUndefined } from './utils'
describe('alphabetIndex', () => {

  it('isNumber 0', async() => {expect(isNumber(0)).toEqual(true)})
  it.concurrent('isNumber NaN', async() => {expect(isNumber({} - {})).toEqual(false)})
  it.concurrent('isNumber true', async() => {expect(isNumber(true)).toEqual(false)})
  it.concurrent('isNumber false', async() => {expect(isNumber(false)).toEqual(false)})
  it.concurrent('isNumber null', async() => {expect(isNumber(null)).toEqual(false)})
  it.concurrent('isNumber undefined', async() => {expect(isNumber(undefined)).toEqual(false)})
  it.concurrent('isNumber "12"', async() => {expect(isNumber('12')).toEqual(false)})
  it.concurrent('isNumber "abc"', async() => {expect(isNumber('abc')).toEqual(false)})
  it.concurrent('isNumber Symbol', async() => {expect(isNumber(Symbol())).toEqual(false)})
  it.concurrent('isNumber array', async() => {expect(isNumber([])).toEqual(false)})
  it.concurrent('isNumber object', async() => {expect(isNumber({})).toEqual(false)})
  it.concurrent('isNumber set', async() => {expect(isNumber(new Set())).toEqual(false)})
  it.concurrent('isNumber map', async() => {expect(isNumber(new Map())).toEqual(false)})
  it.concurrent('isNumber function', async() => {expect(isNumber(function () {})).toEqual(false)})
  it.concurrent('isNumber date', async() => {expect(isNumber(new Date)).toEqual(false)})
  it.concurrent('isNumber Arguments', async() => {(function t() {expect(isNumber(arguments)).toEqual(false)})()})
  it.concurrent('isNumber RegExp', async() => {expect(isNumber(new RegExp('t'))).toEqual(false)})

  it.concurrent('isString 0', async() => {expect(isString(0)).toEqual(false)})
  it.concurrent('isString NaN', async() => {expect(isString({} - {})).toEqual(false)})
  it.concurrent('isString true', async() => {expect(isString(true)).toEqual(false)})
  it.concurrent('isString false', async() => {expect(isString(false)).toEqual(false)})
  it.concurrent('isString null', async() => {expect(isString(null)).toEqual(false)})
  it.concurrent('isString undefined', async() => {expect(isString(undefined)).toEqual(false)})
  it.concurrent('isString "12"', async() => {expect(isString('12')).toEqual(true)})
  it.concurrent('isString "abc"', async() => {expect(isString('abc')).toEqual(true)})
  it.concurrent('isString Symbol', async() => {expect(isString(Symbol())).toEqual(false)})
  it.concurrent('isString array', async() => {expect(isString([])).toEqual(false)})
  it.concurrent('isString object', async() => {expect(isString({})).toEqual(false)})
  it.concurrent('isString set', async() => {expect(isString(new Set())).toEqual(false)})
  it.concurrent('isString map', async() => {expect(isString(new Map())).toEqual(false)})
  it.concurrent('isString function', async() => {expect(isString(function () {})).toEqual(false)})
  it.concurrent('isString date', async() => {expect(isString(new Date)).toEqual(false)})
  it.concurrent('isString Arguments', async() => {(function t() {expect(isString(arguments)).toEqual(false)})()})
  it.concurrent('isString RegExp', async() => {expect(isString(new RegExp('t'))).toEqual(false)})

  it.concurrent('isBoolean 0', async() => {expect(isBoolean(0)).toEqual(false)})
  it.concurrent('isBoolean NaN', async() => {expect(isBoolean({} - {})).toEqual(false)})
  it.concurrent('isBoolean true', async() => {expect(isBoolean(true)).toEqual(true)})
  it.concurrent('isBoolean false', async() => {expect(isBoolean(false)).toEqual(true)})
  it.concurrent('isBoolean null', async() => {expect(isBoolean(null)).toEqual(false)})
  it.concurrent('isBoolean undefined', async() => {expect(isBoolean(undefined)).toEqual(false)})
  it.concurrent('isBoolean "12"', async() => {expect(isBoolean('12')).toEqual(false)})
  it.concurrent('isBoolean "abc"', async() => {expect(isBoolean('abc')).toEqual(false)})
  it.concurrent('isBoolean Symbol', async() => {expect(isBoolean(Symbol())).toEqual(false)})
  it.concurrent('isBoolean array', async() => {expect(isBoolean([])).toEqual(false)})
  it.concurrent('isBoolean object', async() => {expect(isBoolean({})).toEqual(false)})
  it.concurrent('isBoolean set', async() => {expect(isBoolean(new Set())).toEqual(false)})
  it.concurrent('isBoolean map', async() => {expect(isBoolean(new Map())).toEqual(false)})
  it.concurrent('isBoolean function', async() => {expect(isBoolean(function () {})).toEqual(false)})
  it.concurrent('isBoolean date', async() => {expect(isBoolean(new Date)).toEqual(false)})
  it.concurrent('isBoolean Arguments', async() => {(function t() {expect(isBoolean(arguments)).toEqual(false)})()})
  it.concurrent('isBoolean RegExp', async() => {expect(isBoolean(new RegExp('t'))).toEqual(false)})

  it.concurrent('isNull 0', async() => {expect(isNull(0)).toEqual(false)})
  it.concurrent('isNull NaN', async() => {expect(isNull({} - {})).toEqual(false)})
  it.concurrent('isNull true', async() => {expect(isNull(true)).toEqual(false)})
  it.concurrent('isNull false', async() => {expect(isNull(false)).toEqual(false)})
  it.concurrent('isNull null', async() => {expect(isNull(null)).toEqual(true)})
  it.concurrent('isNull undefined', async() => {expect(isNull(undefined)).toEqual(false)})
  it.concurrent('isNull "12"', async() => {expect(isNull('12')).toEqual(false)})
  it.concurrent('isNull "abc"', async() => {expect(isNull('abc')).toEqual(false)})
  it.concurrent('isNull Symbol', async() => {expect(isNull(Symbol())).toEqual(false)})
  it.concurrent('isNull array', async() => {expect(isNull([])).toEqual(false)})
  it.concurrent('isNull object', async() => {expect(isNull({})).toEqual(false)})
  it.concurrent('isNull set', async() => {expect(isNull(new Set())).toEqual(false)})
  it.concurrent('isNull map', async() => {expect(isNull(new Map())).toEqual(false)})
  it.concurrent('isNull function', async() => {expect(isNull(function () {})).toEqual(false)})
  it.concurrent('isNull date', async() => {expect(isNull(new Date)).toEqual(false)})
  it.concurrent('isNull Arguments', async() => {(function t() {expect(isNull(arguments)).toEqual(false)})()})
  it.concurrent('isNull RegExp', async() => {expect(isNull(new RegExp('t'))).toEqual(false)})

  it.concurrent('isUndefined 0', async() => {expect(isUndefined(0)).toEqual(false)})
  it.concurrent('isUndefined NaN', async() => {expect(isUndefined({} - {})).toEqual(false)})
  it.concurrent('isUndefined true', async() => {expect(isUndefined(true)).toEqual(false)})
  it.concurrent('isUndefined false', async() => {expect(isUndefined(false)).toEqual(false)})
  it.concurrent('isUndefined null', async() => {expect(isUndefined(null)).toEqual(false)})
  it.concurrent('isUndefined undefined', async() => {expect(isUndefined(undefined)).toEqual(true)})
  it.concurrent('isUndefined undefined', async() => {expect(isUndefined(void 0)).toEqual(true)})
  it.concurrent('isUndefined "12"', async() => {expect(isUndefined('12')).toEqual(false)})
  it.concurrent('isUndefined "abc"', async() => {expect(isUndefined('abc')).toEqual(false)})
  it.concurrent('isUndefined Symbol', async() => {expect(isUndefined(Symbol())).toEqual(false)})
  it.concurrent('isUndefined array', async() => {expect(isUndefined([])).toEqual(false)})
  it.concurrent('isUndefined object', async() => {expect(isUndefined({})).toEqual(false)})
  it.concurrent('isUndefined set', async() => {expect(isUndefined(new Set())).toEqual(false)})
  it.concurrent('isUndefined map', async() => {expect(isUndefined(new Map())).toEqual(false)})
  it.concurrent('isUndefined function', async() => {expect(isUndefined(function () {})).toEqual(false)})
  it.concurrent('isUndefined date', async() => {expect(isUndefined(new Date)).toEqual(false)})
  it.concurrent('isUndefined Arguments', async() => {(function t() {expect(isUndefined(arguments)).toEqual(false)})()})
  it.concurrent('isUndefined RegExp', async() => {expect(isUndefined(new RegExp('t'))).toEqual(false)})

})