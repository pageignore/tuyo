import { describe, it, expect } from 'vitest'
import alphabetIndex from './alphabetIndex'
describe('alphabetIndex', () => {

  it('type not string', async() => {expect(alphabetIndex(0)).toBeNull()})
  it.concurrent('Parameter is empty', async() => {expect(alphabetIndex()).toBeNull()})
  it.concurrent('a', async() => {expect(alphabetIndex('a')).toEqual(0)})
  it.concurrent('b', async() => {expect(alphabetIndex('b')).toEqual(1)})
  it.concurrent('c', async() => {expect(alphabetIndex('c')).toEqual(2)})
  it.concurrent('d', async() => {expect(alphabetIndex('d')).toEqual(3)})
  it.concurrent('e', async() => {expect(alphabetIndex('e')).toEqual(4)})
  it.concurrent('f', async() => {expect(alphabetIndex('f')).toEqual(5)})
  it.concurrent('g', async() => {expect(alphabetIndex('g')).toEqual(6)})
  it.concurrent('h', async() => {expect(alphabetIndex('h')).toEqual(7)})
  it.concurrent('i', async() => {expect(alphabetIndex('i')).toEqual(8)})
  it.concurrent('j', async() => {expect(alphabetIndex('j')).toEqual(9)})
  it.concurrent('k', async() => {expect(alphabetIndex('k')).toEqual(10)})
  it.concurrent('l', async() => {expect(alphabetIndex('l')).toEqual(11)})
  it.concurrent('m', async() => {expect(alphabetIndex('m')).toEqual(12)})
  it.concurrent('n', async() => {expect(alphabetIndex('n')).toEqual(13)})
  it.concurrent('o', async() => {expect(alphabetIndex('o')).toEqual(14)})
  it.concurrent('p', async() => {expect(alphabetIndex('p')).toEqual(15)})
  it.concurrent('q', async() => {expect(alphabetIndex('q')).toEqual(16)})
  it.concurrent('r', async() => {expect(alphabetIndex('r')).toEqual(17)})
  it.concurrent('s', async() => {expect(alphabetIndex('s')).toEqual(18)})
  it.concurrent('t', async() => {expect(alphabetIndex('t')).toEqual(19)})
  it.concurrent('u', async() => {expect(alphabetIndex('u')).toEqual(20)})
  it.concurrent('v', async() => {expect(alphabetIndex('v')).toEqual(21)})
  it.concurrent('w', async() => {expect(alphabetIndex('w')).toEqual(22)})
  it.concurrent('x', async() => {expect(alphabetIndex('x')).toEqual(23)})
  it.concurrent('y', async() => {expect(alphabetIndex('y')).toEqual(24)})
  it.concurrent('z', async() => {expect(alphabetIndex('z')).toEqual(25)})
  it.concurrent('Multiple letters', async() => {expect(alphabetIndex('abzy')).toEqual(0)})
  it.concurrent('Multiple letters', async() => {expect(alphabetIndex('abzy', 3)).toEqual(24)})
  it.concurrent('index is not', async() => {expect(alphabetIndex('abzy', 4)).toEqual(null)})
})
