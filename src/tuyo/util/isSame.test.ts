import { describe, it, expect } from 'vitest'
import isSame from './isSame'
describe('isBaseType', () => {
    it('Parameter is empty', async() => {expect(isSame()).toEqual(true)})
    it.concurrent('same undefined', async() => {expect(isSame(undefined, undefined)).toEqual(true)})
    it.concurrent('diff undefined', async() => {expect(isSame(undefined, null)).toEqual(false)})
    it.concurrent('same null', async() => {expect(isSame(null, null)).toEqual(true)})
    it.concurrent('diff null', async() => {expect(isSame(null, '')).toEqual(false)})
    it.concurrent('diff false', async() => {expect(isSame(false, '')).toEqual(false)})
    it.concurrent('diff false', async() => {expect(isSame(0, '')).toEqual(false)})
    it.concurrent('diff false', async() => {expect(isSame(0, false)).toEqual(false)})
    it.concurrent('same boolean', async() => {expect(isSame(true, true)).toEqual(true)})
    it.concurrent('same boolean', async() => {expect(isSame(false, false)).toEqual(true)})
    it.concurrent('diff boolean', async() => {expect(isSame(true, false)).toEqual(false)})
    it.concurrent('same number', async() => {expect(isSame(0, 0)).toEqual(true)})
    it.concurrent('same number', async() => {expect(isSame(123, 123)).toEqual(true)})
    it.concurrent('same number', async() => {expect(isSame(5e3, 5e3)).toEqual(true)})
    it.concurrent('same number', async() => {expect(isSame(Infinity, Infinity)).toEqual(true)})
    it.concurrent('same number', async() => {expect(isSame(-Infinity, -Infinity)).toEqual(true)})
    it.concurrent('diff number', async() => {expect(isSame(-Infinity, Infinity)).toEqual(false)})
    it.concurrent('diff number', async() => {expect(isSame(123, 1233)).toEqual(false)})
    it.concurrent('diff number', async() => {expect(isSame(200, NaN)).toEqual(false)})
    it.concurrent('same string', async() => {expect(isSame('', '')).toEqual(true)})
    it.concurrent('same string', async() => {expect(isSame('12', '12')).toEqual(true)})
    it.concurrent('same string', async() => {expect(isSame('abc', 'abc')).toEqual(true)})
    it.concurrent('diff string', async() => {expect(isSame('abc', '123')).toEqual(false)})
    it.concurrent('same array', async() => {expect(isSame([], [])).toEqual(true)})
    it.concurrent('same array', async() => {expect(isSame([1,10], [1,10])).toEqual(true)})
    it.concurrent('same array', async() => {expect(isSame([1,5,8,20], [20,5,1,8])).toEqual(true)})
    it.concurrent('same array', async() => {expect(isSame([1,'a',undefined,null,false,{a:1, b:new Set([1,2])},new Set(),new Map([['z',99],['a', 100]])], [new Map([['a', 100], ['z',99]]),new Set(),{b:new Set([1,2]),a:1},false,undefined,1,'a',null])).toEqual(true)})
    it.concurrent('diff array', async() => {expect(isSame([2,1,'a',undefined,null,false,{a:1, b:new Set([1,2])},new Set(),new Map([['z',99],['a', 100]])], [new Map([['a', 100], ['z',99]]),new Set(),{b:new Set([1,2]),a:1},false,undefined,1,'a',null])).toEqual(false)})
    it.concurrent('same object', async() => {expect(isSame({}, {})).toEqual(true)})
    it.concurrent('same object', async() => {expect(isSame({a: 1, b: '22'}, {a:1, b: '22'})).toEqual(true)})
    it.concurrent('same object', async() => {expect(isSame({b: '22', a: 1}, {a:1, b: '22'})).toEqual(true)})
    it.concurrent('same object', async() => {expect(isSame({b: '22', a: 1, c: [1,11,22]}, {a:1,c:[22,1,11], b: '22'})).toEqual(true)})
    it.concurrent('same object', async() => {expect(isSame({b: '22', a: 1, c: [1,11,22], z: new Set([new Map([['a',1]]), {},[],['a','1','z',100]])}, {z: new Set([[100,'a','z','1'],{},[],new Map([['a',1]])]),a:1,c:[22,1,11], b: '22'})).toEqual(true)})
    it.concurrent('same set', async() => {expect(isSame(new Set(), new Set())).toEqual(true)})
    it.concurrent('same set', async() => {expect(isSame(new Set([]), new Set([]))).toEqual(true)})
    it.concurrent('same set', async() => {expect(isSame(new Set([1,2]), new Set([2,1]))).toEqual(true)})
    it.concurrent('diff set', async() => {expect(isSame(new Set([1,2,4]), new Set([2,1,3]))).toEqual(false)})
    it.concurrent('diff set', async() => {expect(isSame(new Set([1,2,4]), new Set([2,1,3,'2']))).toEqual(false)})
    it.concurrent('same map', async() => {expect(isSame(new Map(), new Map())).toEqual(true)})
    it.concurrent('same map', async() => {expect(isSame(new Map([]), new Map([]))).toEqual(true)})
    it.concurrent('same map', async() => {expect(isSame(new Map([['a', 1],['b', 2]]), new Map([['b', 2],['a', 1]]))).toEqual(true)})
    it.concurrent('diff map', async() => {expect(isSame(new Map([['as', 1],['b', 2]]), new Map([['b', 2],['a', 1]]))).toEqual(false)})
})
